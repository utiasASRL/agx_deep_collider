// Generated by gencpp from file msg_interfaces/VoxGrid.msg
// DO NOT EDIT!


#ifndef MSG_INTERFACES_MESSAGE_VOXGRID_H
#define MSG_INTERFACES_MESSAGE_VOXGRID_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>

namespace msg_interfaces
{
template <class ContainerAllocator>
struct VoxGrid_
{
  typedef VoxGrid_<ContainerAllocator> Type;

  VoxGrid_()
    : header()
    , height(0)
    , width(0)
    , depth(0)
    , dl(0.0)
    , dt(0.0)
    , origin()
    , theta(0.0)
    , data()  {
    }
  VoxGrid_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , height(0)
    , width(0)
    , depth(0)
    , dl(0.0)
    , dt(0.0)
    , origin(_alloc)
    , theta(0.0)
    , data(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _height_type;
  _height_type height;

   typedef uint32_t _width_type;
  _width_type width;

   typedef uint32_t _depth_type;
  _depth_type depth;

   typedef float _dl_type;
  _dl_type dl;

   typedef float _dt_type;
  _dt_type dt;

   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _origin_type;
  _origin_type origin;

   typedef float _theta_type;
  _theta_type theta;

   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;





  typedef boost::shared_ptr< ::msg_interfaces::VoxGrid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::msg_interfaces::VoxGrid_<ContainerAllocator> const> ConstPtr;

}; // struct VoxGrid_

typedef ::msg_interfaces::VoxGrid_<std::allocator<void> > VoxGrid;

typedef boost::shared_ptr< ::msg_interfaces::VoxGrid > VoxGridPtr;
typedef boost::shared_ptr< ::msg_interfaces::VoxGrid const> VoxGridConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::msg_interfaces::VoxGrid_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::msg_interfaces::VoxGrid_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::msg_interfaces::VoxGrid_<ContainerAllocator1> & lhs, const ::msg_interfaces::VoxGrid_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.height == rhs.height &&
    lhs.width == rhs.width &&
    lhs.depth == rhs.depth &&
    lhs.dl == rhs.dl &&
    lhs.dt == rhs.dt &&
    lhs.origin == rhs.origin &&
    lhs.theta == rhs.theta &&
    lhs.data == rhs.data;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::msg_interfaces::VoxGrid_<ContainerAllocator1> & lhs, const ::msg_interfaces::VoxGrid_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace msg_interfaces

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::msg_interfaces::VoxGrid_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::msg_interfaces::VoxGrid_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::msg_interfaces::VoxGrid_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d25ba0a8468b05233fc2cee91e19528";
  }

  static const char* value(const ::msg_interfaces::VoxGrid_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d25ba0a8468b052ULL;
  static const uint64_t static_value2 = 0x33fc2cee91e19528ULL;
};

template<class ContainerAllocator>
struct DataType< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "msg_interfaces/VoxGrid";
  }

  static const char* value(const ::msg_interfaces::VoxGrid_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This represents a 3-D grid map, in which each cell represents the probability of\n"
"# occupancy at different times.\n"
"std_msgs/Header  header \n"
"# Dimensions of the grid, depth for time. [cells]\n"
"uint32 height\n"
"uint32 width\n"
"uint32 depth\n"
"# The map resolutions in meters and seconds [m/cell] [s/cell]\n"
"float32 dl\n"
"float32 dt\n"
"# Origin of the grid in the world: position of the corner of voxel and time origin of the first prediction (0,0,0). [m, m, s]\n"
"geometry_msgs/Point origin\n"
"# Orientation of the map in the 2D plane [rad]\n"
"float32 theta\n"
"# The map data, in row-width-depth order, starting with (0,0,0).  Occupancy\n"
"# probabilities are in the range [0,255].\n"
"uint8[] data\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::msg_interfaces::VoxGrid_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.height);
      stream.next(m.width);
      stream.next(m.depth);
      stream.next(m.dl);
      stream.next(m.dt);
      stream.next(m.origin);
      stream.next(m.theta);
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VoxGrid_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::msg_interfaces::VoxGrid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::msg_interfaces::VoxGrid_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "height: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.height);
    s << indent << "width: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.width);
    s << indent << "depth: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.depth);
    s << indent << "dl: ";
    Printer<float>::stream(s, indent + "  ", v.dl);
    s << indent << "dt: ";
    Printer<float>::stream(s, indent + "  ", v.dt);
    s << indent << "origin: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "theta: ";
    Printer<float>::stream(s, indent + "  ", v.theta);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MSG_INTERFACES_MESSAGE_VOXGRID_H
